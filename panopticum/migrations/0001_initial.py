# Generated by Django 2.1.15 on 2019-12-09 18:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ComponentCategoryModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Platform, Search engine, ...', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentDataPrivacyClassModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Infrastructure, Metadata management, Data management, Application', max_length=64)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ComponentLocationClassModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Global, Datacenter, Customer, Endpoint', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ComponentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Component short name', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentCategoryModel')),
                ('data_privacy_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentDataPrivacyClassModel')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentRuntimeTypeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Library, Framework, Driver, OS Service, OS Process, Web Service, Database, MQ', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentSubcategoryModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Platform, Search engine, ...', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentCategoryModel')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComponentVersionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text='note: component version instance will be cloned if you change version!', max_length=64)),
                ('comments', models.TextField(blank=True, null=True)),
                ('dev_life_status', models.CharField(blank=True, choices=[('new', 'New'), ('mature', 'Mature'), ('legacy', 'Legacy'), ('eol', 'End Of Life'), ('eos', 'End Of Support')], max_length=16, null=True)),
                ('dev_raml', models.URLField(blank=True, help_text='RAML link', null=True)),
                ('dev_repo', models.URLField(blank=True, help_text='Repository', null=True)),
                ('dev_api_guideline_compliance', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('no', 'No'), ('partial', 'Partial'), ('yes', 'Yes')], max_length=16, null=True)),
                ('dev_api_is_public', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('no', 'No'), ('partial', 'Partial'), ('yes', 'Yes')], max_length=16, null=True)),
                ('dev_autotests_report', models.URLField(blank=True, help_text='Autotests report link', null=True)),
                ('dev_jira_component', models.URLField(blank=True, help_text='JIRA component', null=True)),
                ('dev_build_jenkins_job', models.URLField(blank=True, help_text='Jenkins job to build the component', null=True)),
                ('dev_documentation', models.URLField(blank=True, help_text='Documentation entry page', null=True)),
                ('compliance_fips', models.BooleanField(help_text='FIPS compliance')),
                ('compliance_gdpr', models.BooleanField(help_text='GDPR compliance')),
                ('op_deployment_name', models.CharField(blank=True, max_length=64, null=True)),
                ('op_binary_name', models.CharField(blank=True, max_length=64, null=True)),
                ('op_anonymization_support', models.BooleanField(blank=True, help_text='Is anonymisation supported?', null=True)),
                ('op_metrics', models.BooleanField(help_text='Metrics availability')),
                ('op_guide_link', models.URLField(blank=True, help_text='Operations guide link', null=True)),
                ('op_sla_doc_link', models.URLField(blank=True, help_text='SLA/SLO documentation link', null=True)),
                ('op_capacity_doc_link', models.URLField(blank=True, help_text='Capacity planning document', null=True)),
                ('op_backup_doc_link', models.URLField(blank=True, help_text='Backup guide description', null=True)),
                ('op_safe_restart', models.BooleanField(help_text='Is it safe to restart?')),
                ('op_safe_delete', models.BooleanField(help_text='Is it safe to delete?')),
                ('op_safe_redeploy', models.BooleanField(help_text='Is it safe to redeploy?')),
                ('op_horizontal_scalability', models.BooleanField(help_text='Horizontal scalability?')),
                ('op_high_availability', models.BooleanField(help_text='High availability?')),
                ('op_zero_downtime_upgrade', models.BooleanField(help_text='Zero-downtime upgrade')),
                ('qa_manual_tests_link', models.URLField(blank=True, help_text='Manual tests link', null=True)),
                ('qa_manual_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16, null=True)),
                ('qa_unit_tests_link', models.URLField(blank=True, help_text='Unit tests link', null=True)),
                ('qa_unit_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16)),
                ('qa_e2e_tests_link', models.URLField(blank=True, help_text='E2E tests link', null=True)),
                ('qa_e2e_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16, null=True)),
                ('qa_perf_tests_link', models.URLField(blank=True, help_text='Performance tests link', null=True)),
                ('qa_perf_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16, null=True)),
                ('qa_longhaul_tests_link', models.URLField(blank=True, help_text='Long haul tests link', null=True)),
                ('qa_longhaul_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16, null=True)),
                ('qa_security_tests_link', models.URLField(blank=True, help_text='Security tests link', null=True)),
                ('qa_security_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16, null=True)),
                ('qa_api_tests_link', models.URLField(blank=True, help_text='API tests link', null=True)),
                ('qa_api_tests_quality', models.CharField(blank=True, choices=[('n/a', 'N/A'), ('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=16, null=True)),
                ('meta_update_date', models.DateTimeField()),
                ('meta_deleted', models.BooleanField()),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='component_version', to='panopticum.ComponentModel')),
                ('depends_on', models.ManyToManyField(blank=True, null=True, related_name='component_blocks', to='panopticum.ComponentModel')),
            ],
            options={
                'ordering': ['-version'],
            },
        ),
        migrations.CreateModel(
            name='DatabaseVendorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Database vendor: MSSQl, Oracle, SQLite, PostgreSQL, MySQL, Percona', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DatacenterModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Datacenter name', max_length=64)),
                ('info', models.URLField(blank=True, help_text='Info link', null=True)),
                ('grafana', models.URLField(blank=True, help_text='Grafana link', null=True)),
                ('metrics', models.URLField(blank=True, help_text='Grafana link', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeploymentTypeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Component deployment type: k8s, Virtuozzo CT, Virtuozzo VM', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FrameworkModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Framework', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LoggerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Logger model', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ORMModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='ORM', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OSFamilyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Linux, Windows, OSX, Solaris', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PersonModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.EmailField(blank=True, max_length=254)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.PersonModel')),
            ],
            options={
                'ordering': ['email'],
            },
        ),
        migrations.CreateModel(
            name='PersonRoleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductFamilyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product family', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product', max_length=64)),
                ('order', models.IntegerField(help_text='sorting order')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ProductFamilyModel')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProgrammingLanguageModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Programming language', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SoftwareVendorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Component vendor: OpenSource, MyCompany, ...', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TCPPortModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='TCP/IP port name: HTTP, SSH, ...', max_length=64)),
                ('port', models.IntegerField(help_text='TCP/IP port: 80, 21, ...')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TestingModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='n/a, pre-commit, bvt, daily, weekly, manually', max_length=64)),
                ('order', models.IntegerField(help_text='sorting order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='personmodel',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.PersonRoleModel'),
        ),
        migrations.AddField(
            model_name='ormmodel',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ProgrammingLanguageModel'),
        ),
        migrations.AddField(
            model_name='frameworkmodel',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ProgrammingLanguageModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_database',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.DatabaseVendorModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_framework',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.FrameworkModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_language',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.ProgrammingLanguageModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_logging',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.LoggerModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='dev_orm',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.ORMModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='meta_update_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='op_deployment_type',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.DeploymentTypeModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='op_open_port',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.TCPPortModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_architect',
            field=models.ManyToManyField(blank=True, null=True, related_name='architect_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_escalation_list',
            field=models.ManyToManyField(blank=True, null=True, related_name='escalation_list_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_expert',
            field=models.ManyToManyField(blank=True, null=True, related_name='expert_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_maintainer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='maintainer_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_product_manager',
            field=models.ManyToManyField(blank=True, null=True, related_name='product_manager_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_program_manager',
            field=models.ManyToManyField(blank=True, null=True, related_name='program_managed_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='owner_responsible_qa',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='responsible_qa_of', to='panopticum.PersonModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='product',
            field=models.ManyToManyField(blank=True, help_text='note: product can be linked to only one version of component', null=True, to='panopticum.ProductModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_api_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='api_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_e2e_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='e2e_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_longhaul_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='longhaul_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_manual_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='manual_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_perf_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='perf_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_security_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='security_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentversionmodel',
            name='qa_unit_tests_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='unit_tests', to='panopticum.TestingModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='datacenter',
            field=models.ManyToManyField(blank=True, null=True, to='panopticum.DatacenterModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='location_class',
            field=models.ManyToManyField(to='panopticum.ComponentLocationClassModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='runtime_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentRuntimeTypeModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='subcategory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='panopticum.ComponentSubcategoryModel'),
        ),
        migrations.AddField(
            model_name='componentmodel',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='panopticum.SoftwareVendorModel'),
        ),
    ]
